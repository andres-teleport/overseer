// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobworkerServiceClient is the client API for JobworkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobworkerServiceClient interface {
	Start(ctx context.Context, in *Job, opts ...grpc.CallOption) (*JobID, error)
	Stop(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*StopResponse, error)
	Status(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*StatusResponse, error)
	StdOut(ctx context.Context, in *JobID, opts ...grpc.CallOption) (JobworkerService_StdOutClient, error)
	StdErr(ctx context.Context, in *JobID, opts ...grpc.CallOption) (JobworkerService_StdErrClient, error)
}

type jobworkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobworkerServiceClient(cc grpc.ClientConnInterface) JobworkerServiceClient {
	return &jobworkerServiceClient{cc}
}

func (c *jobworkerServiceClient) Start(ctx context.Context, in *Job, opts ...grpc.CallOption) (*JobID, error) {
	out := new(JobID)
	err := c.cc.Invoke(ctx, "/overseer.JobworkerService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobworkerServiceClient) Stop(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/overseer.JobworkerService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobworkerServiceClient) Status(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/overseer.JobworkerService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobworkerServiceClient) StdOut(ctx context.Context, in *JobID, opts ...grpc.CallOption) (JobworkerService_StdOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobworkerService_ServiceDesc.Streams[0], "/overseer.JobworkerService/StdOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobworkerServiceStdOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobworkerService_StdOutClient interface {
	Recv() (*OutputChunk, error)
	grpc.ClientStream
}

type jobworkerServiceStdOutClient struct {
	grpc.ClientStream
}

func (x *jobworkerServiceStdOutClient) Recv() (*OutputChunk, error) {
	m := new(OutputChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobworkerServiceClient) StdErr(ctx context.Context, in *JobID, opts ...grpc.CallOption) (JobworkerService_StdErrClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobworkerService_ServiceDesc.Streams[1], "/overseer.JobworkerService/StdErr", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobworkerServiceStdErrClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobworkerService_StdErrClient interface {
	Recv() (*OutputChunk, error)
	grpc.ClientStream
}

type jobworkerServiceStdErrClient struct {
	grpc.ClientStream
}

func (x *jobworkerServiceStdErrClient) Recv() (*OutputChunk, error) {
	m := new(OutputChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobworkerServiceServer is the server API for JobworkerService service.
// All implementations must embed UnimplementedJobworkerServiceServer
// for forward compatibility
type JobworkerServiceServer interface {
	Start(context.Context, *Job) (*JobID, error)
	Stop(context.Context, *JobID) (*StopResponse, error)
	Status(context.Context, *JobID) (*StatusResponse, error)
	StdOut(*JobID, JobworkerService_StdOutServer) error
	StdErr(*JobID, JobworkerService_StdErrServer) error
	mustEmbedUnimplementedJobworkerServiceServer()
}

// UnimplementedJobworkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobworkerServiceServer struct {
}

func (UnimplementedJobworkerServiceServer) Start(context.Context, *Job) (*JobID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobworkerServiceServer) Stop(context.Context, *JobID) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobworkerServiceServer) Status(context.Context, *JobID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedJobworkerServiceServer) StdOut(*JobID, JobworkerService_StdOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StdOut not implemented")
}
func (UnimplementedJobworkerServiceServer) StdErr(*JobID, JobworkerService_StdErrServer) error {
	return status.Errorf(codes.Unimplemented, "method StdErr not implemented")
}
func (UnimplementedJobworkerServiceServer) mustEmbedUnimplementedJobworkerServiceServer() {}

// UnsafeJobworkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobworkerServiceServer will
// result in compilation errors.
type UnsafeJobworkerServiceServer interface {
	mustEmbedUnimplementedJobworkerServiceServer()
}

func RegisterJobworkerServiceServer(s grpc.ServiceRegistrar, srv JobworkerServiceServer) {
	s.RegisterService(&JobworkerService_ServiceDesc, srv)
}

func _JobworkerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobworkerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.JobworkerService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobworkerServiceServer).Start(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobworkerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobworkerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.JobworkerService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobworkerServiceServer).Stop(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobworkerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobworkerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.JobworkerService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobworkerServiceServer).Status(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobworkerService_StdOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobworkerServiceServer).StdOut(m, &jobworkerServiceStdOutServer{stream})
}

type JobworkerService_StdOutServer interface {
	Send(*OutputChunk) error
	grpc.ServerStream
}

type jobworkerServiceStdOutServer struct {
	grpc.ServerStream
}

func (x *jobworkerServiceStdOutServer) Send(m *OutputChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _JobworkerService_StdErr_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobworkerServiceServer).StdErr(m, &jobworkerServiceStdErrServer{stream})
}

type JobworkerService_StdErrServer interface {
	Send(*OutputChunk) error
	grpc.ServerStream
}

type jobworkerServiceStdErrServer struct {
	grpc.ServerStream
}

func (x *jobworkerServiceStdErrServer) Send(m *OutputChunk) error {
	return x.ServerStream.SendMsg(m)
}

// JobworkerService_ServiceDesc is the grpc.ServiceDesc for JobworkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobworkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "overseer.JobworkerService",
	HandlerType: (*JobworkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobworkerService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobworkerService_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _JobworkerService_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StdOut",
			Handler:       _JobworkerService_StdOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StdErr",
			Handler:       _JobworkerService_StdErr_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/overseer.proto",
}
